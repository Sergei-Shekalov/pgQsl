
/*
Проектирование базы данных:

Нормализацией - Приведение структуры базы данных к нормальным формам.
Нормализация таблиц к нормальным формам основана на дикомпозиции.

1.НФ(Нормальная форам)
  Правила:
  1. Строки таблицы не содержат дубликатов
  2. Все колонки таблицы простых типов
  3. В каждое поле строк таблицы должно содержать по одному значению

2.НФ(Нормальная форам)
  Правила
  1. Таблица должна соотвествовать 1НФ. 
  2. В таблице должнен быть первичный ключ. 
  3. Все атрибуты (поля) описывают первичный ключ целиком, а не лишь его часть.

3.НФ(Нормальная форам)
  1. Таблица должна соотвествовать 2НФ.
  2. Не должно быть зависимости одних не ключевых атрибутов от других. 
     Это когда данные связанные по смыслу лучше хранить в отдельной таблице. 

*/

/*
Работа с таблицами
CREATE TABLE <table name> - создает таблицу.
При удалении через запятую можно указать несколько таблиц для удаления.
DROP TABLE <table name> - удаляет таблицу.
DROP TABLE IF EXISTS <table name>, <table name> - удаляет существующию таблцу.
DROP TABLE IF EXISTS <table name> CASCADE - удаляет таблицу, если даже от этой таблицы зависят другие объекты.

Создание полей  
Типы:
integer - тип целочисленное число.
varchar() - тип строки ограниченной длины, в скобках указана длина.
text - тип строки не ограниченной длины.
Работа с полями
PRIMARY KEY - создает первичный клюx, внутренний индетификатор таблицы.
FOREIGN KEY, REFERENCES <table name>(<column name>) - создает внешний ключ, FOREIGN KEY не используется PostgreSQL.
CONSTRAINT <table name> PRIMARY KEY (<field>, <field>); - создает составной ключ состоящий из нескольких полей.
NOT NULL - запрещает передачу значения null в поле таблицы.
*/

CREATE TABLE publisher
(  
	publisher_id integer PRIMARY KEY,
	org_name varchar(128) NOT NULL,
    address text NOT NULL
  );
  
 CREATE TABLE book
 (
    book_id integer PRIMARY KEY,
	fk_publisher_id integer REFERENCES publisher(publisher_id) NOT NULL, 
	title text NOT NULL,
	isbn varchar(32) NOT NULL
 );
 
 DROP TABLE publisher;
 DROP TABLE book;